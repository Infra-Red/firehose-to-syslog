// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package stats

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonE3ab7953DecodeGithubComCloudfoundryCommunityFirehoseToSyslogStats(in *jlexer.Lexer, out *Stats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "consume":
			out.Consume = uint64(in.Uint64())
		case "consume_per_sec":
			out.ConsumePerSec = uint64(in.Uint64())
		case "consume_fail":
			out.ConsumeFail = uint64(in.Uint64())
		case "consume_http_start_stop":
			out.ConsumeHttpStartStop = uint64(in.Uint64())
		case "consume_value_metric":
			out.ConsumeValueMetric = uint64(in.Uint64())
		case "consume_counter_event":
			out.ConsumeCounterEvent = uint64(in.Uint64())
		case "consume_log_message":
			out.ConsumeLogMessage = uint64(in.Uint64())
		case "consume_error":
			out.ConsumeError = uint64(in.Uint64())
		case "consume_container_metric":
			out.ConsumeContainerMetric = uint64(in.Uint64())
		case "consume_unknown":
			out.ConsumeUnknown = uint64(in.Uint64())
		case "ignored":
			out.Ignored = uint64(in.Uint64())
		case "forwarded":
			out.Forwarded = uint64(in.Uint64())
		case "publish":
			out.Publish = uint64(in.Uint64())
		case "publish_per_sec":
			out.PublishPerSec = uint64(in.Uint64())
		case "publish_fail":
			out.PublishFail = uint64(in.Uint64())
		case "slow_consumer_alert":
			out.SlowConsumerAlert = uint64(in.Uint64())
		case "subinupt_buffer":
			out.SubInputBuffer = int64(in.Int64())
		case "instance_id":
			out.InstanceID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE3ab7953EncodeGithubComCloudfoundryCommunityFirehoseToSyslogStats(out *jwriter.Writer, in Stats) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume\":")
	out.Uint64(uint64(in.Consume))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_per_sec\":")
	out.Uint64(uint64(in.ConsumePerSec))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_fail\":")
	out.Uint64(uint64(in.ConsumeFail))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_http_start_stop\":")
	out.Uint64(uint64(in.ConsumeHttpStartStop))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_value_metric\":")
	out.Uint64(uint64(in.ConsumeValueMetric))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_counter_event\":")
	out.Uint64(uint64(in.ConsumeCounterEvent))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_log_message\":")
	out.Uint64(uint64(in.ConsumeLogMessage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_error\":")
	out.Uint64(uint64(in.ConsumeError))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_container_metric\":")
	out.Uint64(uint64(in.ConsumeContainerMetric))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"consume_unknown\":")
	out.Uint64(uint64(in.ConsumeUnknown))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ignored\":")
	out.Uint64(uint64(in.Ignored))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"forwarded\":")
	out.Uint64(uint64(in.Forwarded))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"publish\":")
	out.Uint64(uint64(in.Publish))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"publish_per_sec\":")
	out.Uint64(uint64(in.PublishPerSec))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"publish_fail\":")
	out.Uint64(uint64(in.PublishFail))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"slow_consumer_alert\":")
	out.Uint64(uint64(in.SlowConsumerAlert))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"subinupt_buffer\":")
	out.Int64(int64(in.SubInputBuffer))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"instance_id\":")
	out.Int(int(in.InstanceID))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE3ab7953EncodeGithubComCloudfoundryCommunityFirehoseToSyslogStats(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE3ab7953EncodeGithubComCloudfoundryCommunityFirehoseToSyslogStats(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE3ab7953DecodeGithubComCloudfoundryCommunityFirehoseToSyslogStats(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE3ab7953DecodeGithubComCloudfoundryCommunityFirehoseToSyslogStats(l, v)
}
